import groovy.io.FileType
import groovy.sql.Sql

// 初期化処理
buildscript {
    ext {
        springBootVersion = "2.7.14"
        jeeVersion = "8.0.1"
        mySqlConnectorVersion = "8.0.33"
        junitVersion = "5.10.0"
        junitPlatformVersion = "1.10.0"
    }
    // リポジトリ設定
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "mysql:mysql-connector-java:${mySqlConnectorVersion}"
    }
}

// プラグイン読み込み
plugins {
    id "java"
    id "org.springframework.boot" version "${springBootVersion}" 
    id "io.spring.dependency-management" version "1.0.15.RELEASE"
    id "eclipse"
    id "jacoco"
}

// リポジトリ設定
repositories {
    mavenCentral()
}

// 文字コード設定
def defaultEncoding = "UTF-8"
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

// Gradle7.x対応
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// 依存関係設定
dependencies {
    implementation "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compileOnly "javax:javaee-api:${jeeVersion}"
    runtimeOnly "mysql:mysql-connector-java:${mySqlConnectorVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}

// Javaプラグイン設定
sourceCompatibility = 17
targetCompatibility = 17

// ソースフォルダの設定
sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
    test {
        java {
            srcDir "src/test/java"
        }
        resources {
            srcDir "src/test/resources"
        }
    }
}

// 初期データをセットアップする（MySQL）
task setupMySQL doLast {
    execSqlDir("$projectDir/sql/mysql", envconf.mysql.general.url,
            envconf.mysql.general.user, envconf.mysql.general.password,
            envconf.mysql.driverClass)
}

// 設定情報の読み込み
def envconf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/env-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/env-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.envconf = envconf

// SQLを発行するメソッド
def execSqlDir(dir, url, user, password, driverClass) {
    new File(dir).listFiles().sort{a, b -> a.name <=> b.name}.each{ File f ->
        ant.sql(url: url,
            userid: user,
            password: password,
            driver: driverClass,
            classpath: buildscript.configurations.classpath.asPath,
            encoding: "UTF-8",
            onerror: "continue") {
                fileset(file: f)
            }
    }
}

// SQLを発行するメソッド（ファイル指定）
def execSql(file, url, user, password, driverClass) {
    ant.sql(
        driver: driverClass,
        url: url,
        userid: user,
        password: password,
        classpath: buildscript.configurations.classpath.asPath,
        encoding: "UTF-8",
        onerror: "continue") {
            fileset(file: file)
        }
}

// タスクをグループ化する
[setupMySQL]*.group = "setup-init-data"

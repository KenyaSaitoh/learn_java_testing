import groovy.io.FileType
import groovy.sql.Sql

// 初期化処理
buildscript {
    ext {
        springBootVer = "3.2.2"
        thymeleafJava8timeVer = "3.0.4.RELEASE"
        thymeleafSpringSec6Ver = "3.1.2.RELEASE"
        springSecOauth2Ver = "6.1.5"
        springTxVer = "6.0.11"
        jeeVer = "10.0.0"
        jeeTxVer = "2.0.1"
        mybatisStarterVer = "3.0.2"
        mariaDbConnectorVer = "3.3.2"
        log4jVer = "2.22.1"
        junitVer = "5.10.2"
        junitPlatformVer = "1.10.2"
        mockitoVer = "5.10.0"
        mockitoInlineVer = "5.2.0"
        dbunitVer = "2.7.3"
        restAssuredVer = "5.3.2"
        wireMockVer = "3.0.1"
        guavaVer = "32.1.2-jre"
        selenideVer = "7.1.0"
        gatlingVersion = "3.10.3"
    }

    // リポジトリ設定
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.mariadb.jdbc:mariadb-java-client:${mariaDbConnectorVer}"
    }
}

subprojects {
    // プラグイン読み込み
    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "jacoco"

    // リポジトリ設定
    repositories {
        mavenCentral()
    }

    // 文字コード設定
    def defaultEncoding = "UTF-8"
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

    // リソース競合時の処理を設定（Gradle7.x対応）
    tasks.withType(ProcessResources) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    // Javaプラグイン設定
    sourceCompatibility = 17
    targetCompatibility = 17

    // ソースフォルダの設定
    sourceSets {
        main {
            java {
                srcDir "src/main/java"
            }
            resources {
                srcDir "src/main/resources"
            }
        }
        test {
            java {
                srcDir "src/test/java"
            }
            resources {
                srcDir "src/test/resources"
            }
        }
    }

    // 初期データをセットアップする（MariaDB）
    task setupMariaDB doLast {
        execSqlDir("$projectDir/sql/mariadb", envconf.mariadb.general.url,
                envconf.mariadb.general.user, envconf.mariadb.general.password,
                envconf.mariadb.driverClass)
    }

    // タスクをグループ化する
    [setupMariaDB]*.group = "setup-init-data"
}

// 設定情報の読み込み
def envconf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/env-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/env-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.envconf = envconf

// SQLを発行するメソッド
def execSqlDir(dir, url, user, password, driverClass) {
    new File(dir).listFiles().sort{a, b -> a.name <=> b.name}.each{ File f ->
        ant.sql(url: url,
            userid: user,
            password: password,
            driver: driverClass,
            classpath: buildscript.configurations.classpath.asPath,
            encoding: "UTF-8",
            onerror: "continue") {
                fileset(file: f)
            }
    }
}

// SQLを発行するメソッド（ファイル指定）
def execSql(file, url, user, password, driverClass) {
    ant.sql(
        driver: driverClass,
        url: url,
        userid: user,
        password: password,
        classpath: buildscript.configurations.classpath.asPath,
        encoding: "UTF-8",
        onerror: "continue") {
            fileset(file: file)
        }
}

// MariaDBを初期化する
task initMariaDB doLast {
    println envconf
    execSql("$projectDir/sql/mariadb/DROP_MARIADB_USER.sql",
            envconf.mariadb.general.baseUrl, "root", envconf.mariadb.rootPassword,
            envconf.mariadb.driverClass)
    execSql("$projectDir/sql/mariadb/DROP_MARIADB_DATABASE.sql",
            envconf.mariadb.general.baseUrl, "root", envconf.mariadb.rootPassword,
            envconf.mariadb.driverClass)
    execSql("$projectDir/sql/mariadb/CREATE_MARIADB_USER.sql",
            envconf.mariadb.general.baseUrl, "root", envconf.mariadb.rootPassword,
            envconf.mariadb.driverClass)
    execSql("$projectDir/sql/mariadb/CREATE_MARIADB_DATABASE.sql",
            envconf.mariadb.general.baseUrl, "root", envconf.mariadb.rootPassword,
            envconf.mariadb.driverClass)
}

[initMariaDB]*.group = "init-database"
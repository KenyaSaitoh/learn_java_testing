import groovy.io.FileType
import groovy.sql.Sql

// 初期化処理
buildscript {
    ext {
        springBootVersion = "2.7.12"
    }
    // リポジトリ設定
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "mysql:mysql-connector-java:8.0.33"
    }
}

subprojects {
    // プラグイン読み込み
    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "eclipse"
    apply plugin: "jacoco"

    // リポジトリ設定
    repositories {
        mavenCentral()
    }

    // 文字コード設定
    def defaultEncoding = "UTF-8"
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

    // Gradle7.x対応
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    // 依存関係設定
    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    // Javaプラグイン設定
    sourceCompatibility = 17
    targetCompatibility = 17

    // ソースフォルダの設定
    sourceSets {
        main {
            java {
                srcDir "src/main/java"
            }
            resources {
                srcDir "src/main/resources"
            }
        }
        test {
            java {
                srcDir "src/test/java"
            }
            resources {
                srcDir "src/test/resources"
            }
        }
    }

    // 初期データをセットアップする（ローカルMySQL）
    task setupLocalMySQL doLast {
        execSqlDir("$projectDir/sql/mysql", envconf.mysql.general.url,
                envconf.mysql.general.user, envconf.mysql.general.password,
                envconf.mysql.driverClass)
    }

    // タスクをグループ化する
    [setupLocalMySQL]*.group = "setup-init-data"
}

// 設定情報の読み込み
def envconf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/env-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/env-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.envconf = envconf

// SQLを発行するメソッド
def execSqlDir(dir, url, user, password, driverClass) {
    new File(dir).listFiles().sort{a, b -> a.name <=> b.name}.each{ File f ->
        ant.sql(url: url,
            userid: user,
            password: password,
            driver: driverClass,
            classpath: buildscript.configurations.classpath.asPath,
            encoding: "UTF-8",
            onerror: "continue") {
                fileset(file: f)
            }
    }
}

// SQLを発行するメソッド（ファイル指定）
def execSql(file, url, user, password, driverClass) {
    ant.sql(
        driver: driverClass,
        url: url,
        userid: user,
        password: password,
        classpath: buildscript.configurations.classpath.asPath,
        encoding: "UTF-8",
        onerror: "continue") {
            fileset(file: file)
        }
}

// Local MySQLを初期化する
task initLocalMySQL doLast {
    println envconf
    execSql("$projectDir/sql/mysql/DROP_MYSQL_USER.sql",
            envconf.mysql.general.baseUrl, "root", envconf.mysql.rootPassword,
            envconf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/DROP_MYSQL_DATABASE.sql",
            envconf.mysql.general.baseUrl, "root", envconf.mysql.rootPassword,
            envconf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/CREATE_MYSQL_USER.sql",
            envconf.mysql.general.baseUrl, "root", envconf.mysql.rootPassword,
            envconf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/CREATE_MYSQL_DATABASE.sql",
            envconf.mysql.general.baseUrl, "root", envconf.mysql.rootPassword,
            envconf.mysql.driverClass)
}

[initLocalMySQL]*.group = "init-database"
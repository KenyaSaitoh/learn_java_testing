import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class ShippingServiceTest {
    @Mock
    CostCalculatorIF costCalculator;

    ShippingService shippingService;

    Client goldClient;
    Client diamondClient;
    Baggage baggage;
    LocalDateTime orderDateTime;
    LocalDate receiveDate;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        shippingService = new ShippingService(costCalculator);
        goldClient = new Client(10001, "Alice", "大阪府住吉区1-1-1",
                ClientType.GOLD, RegionType.KANSAI);
        diamondClient = new Client(10001, "Alice", "大阪府住吉区1-1-1",
                ClientType.DIAMOND, RegionType.KANSAI);
        baggage = new Baggage(BaggageType.MIDDLE, false);
        orderDateTime = LocalDateTime.now();
        receiveDate = LocalDate.of(2023, 11, 30);
        ShippingDAO.findAll().clear();
    }

    @Test
    void test_OrderShipping_GoldCustomer_NoDiscount() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage);
        shippingService.orderShipping(goldClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, goldClient, receiveDate,
                baggageList, 1600);
        assertEquals(expected, actual);
    }

    @Test
    void test_OrderShipping_GoldCustomer_Discount_ReachLimit() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage, baggage);
        shippingService.orderShipping(goldClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, goldClient, receiveDate,
                baggageList, 3000);
        assertEquals(expected, actual);
    }

    @Test
    void test_OrderShipping_GoldCustomer_Discount_NoLimit() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage, baggage, baggage);
        shippingService.orderShipping(goldClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, goldClient, receiveDate,
                baggageList, 4320);
        assertEquals(expected, actual);
    }

    @Test
    void test_OrderShipping_DiamondCustomer_NoDiscount() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage);
        shippingService.orderShipping(diamondClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, diamondClient, receiveDate,
                baggageList, 1600);
        assertEquals(expected, actual);
    }

    @Test
    void test_OrderShipping_DiamondCustomer_Discount_ReachLimit() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage, baggage);
        shippingService.orderShipping(diamondClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, diamondClient, receiveDate,
                baggageList, 2500);
        assertEquals(expected, actual);
    }

    @Test
    void test_OrderShipping_DiamondCustomer_Discount_NoLimit() {
        when(costCalculator.calcShippingCost(
                any(BaggageType.class), any(RegionType.class))).thenReturn(1600);
        List<Baggage> baggageList = Arrays.asList(baggage, baggage, baggage);
        shippingService.orderShipping(diamondClient, receiveDate, baggageList);
        Shipping actual = ShippingDAO.findAll().get(0);
        Shipping expected = new Shipping(orderDateTime, diamondClient, receiveDate,
                baggageList, 3600);
        assertEquals(expected, actual);
    }
}